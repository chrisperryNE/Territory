using System;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using TerritoryClasses;

namespace TerritoryClasses
{
    public class Program
    {
        Random rand = new Random();
        Random r = new Random();


        public static void Main(String[] args)
        {
            Console.WriteLine("==^==^==^==\n TERRITORY\n==^==^==^==");
            Console.WriteLine("\nGameplay:\n" +
                "\nTerritory is a variation on war that takes place over 13 rounds." +
            "\nThe object of the game is to take over the largest amount of territory," +
            "\nwhich is represented by the values of cards that can be won during play." +
            "\nDuring each round, both players (human and computer) draw three cards." +
            "\nThey must choose one card to represent the number of troops they are sending into battle." +
            "\nThe round is won by the player who places the highest number of troops." +
            "\nA second card must be chosen to represent the territory available to win during the battle." +
            "\nThe winner will receive the territory cards and their value will be added to the players score." +
            "\nThe final card is discarded, unless there is a tie, and it is used as a tiebreaker." +
            "\n\nWinning:\n\nThe player with the most territory after 13 rounds wins.",
            "\n\nCard Values:\n\nAce = 1 | Jack = 10 | Queen = 10 | King = 10 | card number = value");

            Console.WriteLine("\n================================");
            //RoundNumber(): Should display the 
            Round();
            Score();

            Console.WriteLine("\n================================");

            //Hand();


            //To access list from another class, check this resource:
            //https://stackoverflow.com/questions/3717028/access-list-from-another-class

            //https://stackoverflow.com/questions/19231460/define-a-list-like-listint-string

            
            Deck deck = new Deck();
            List<Tuple<string, int>> shuffledcards = deck.shuffledcards;

            int humanTroop = 0;
            int humanTerritory = 0;
            
            int humanHeldCard = 0;

            Console.WriteLine("\nPlayer hand:");

            Console.WriteLine(shuffledcards[0]);
            Console.WriteLine(shuffledcards[1]);
            Console.WriteLine(shuffledcards[2]);

            Console.WriteLine("\nHere is one card from the computer's hand:");

            int randomComputerCard = r.Next(3, 6);

            Console.WriteLine(shuffledcards[randomComputerCard]);

            Console.WriteLine("\nChecking to see if it's random.  Here's the full hand.");
            Console.WriteLine(shuffledcards[3]);
            Console.WriteLine(shuffledcards[4]);
            Console.WriteLine(shuffledcards[5]);

            int computerTroop = shuffledcards[3].Item2;
            int computerTerritory = shuffledcards[4].Item2;
            int computerHeldCard = shuffledcards[5].Item2;





            //Get int of tuple with Item2:  https://learn.microsoft.com/en-us/dotnet/api/system.tuple-2?view=net-8.0
            int humancard1 = shuffledcards[0].Item2;
            int humancard2 = shuffledcards[1].Item2;
            int humancard3 = shuffledcards[2].Item2;
            Console.WriteLine("\nWhich value would you like to represent your troop size?");
            Console.WriteLine("Press 1, 2 or 3");
            int troopChoice = Convert.ToInt32(Console.ReadLine());

            switch (troopChoice)
            {
                case 1:
                    humanTroop = humancard1;
                    humancard1 = 0;
                    break;
                case 2:
                    humanTroop = humancard2;
                    humancard2 = 0;
                    break;
                case 3:
                    humanTroop = humancard3;
                    humancard3 = 0;
                    break;
                default:
                    break;
            }
            Console.WriteLine("Troop size: " + humanTroop);


            Console.WriteLine("\nWhich value would you like to represent the territory of the battlefield?");
            Console.WriteLine("Press 1, 2 or 3");
            int territoryChoice = Convert.ToInt32(Console.ReadLine());

            switch (territoryChoice)
            {
                case 1:
                    if(troopChoice == 1)
                    {
                        Console.WriteLine("You already chose this card to represent your troop size");
                        //need to loop question
                 
                    }
                    else
                    {
                        humanTerritory = humancard1;
                        humancard1 = 0;
                    }
                    break;
                case 2:
                    if (troopChoice == 2)
                    {
                        Console.WriteLine("You already chose this card to represent your troop size");
                        break;
                    }
                    else
                    {
                        humanTerritory = humancard2;
                        humancard2 = 0;
                    }
                    break;
                case 3:
                    if (troopChoice == 3)
                    {
                        Console.WriteLine("You already chose this card to represent your troop size");
                        break;
                    }
                    else
                    {
                        humanTerritory = humancard3;
                        humancard3 = 0;
                    }
                    break;
                default:
                    break;
            }
            Console.WriteLine("Territory size: " + humanTerritory);

            
            if (humancard1 == 0 && humancard2 == 0)
            {
                // Keep shuffledcards[2];
                // Removing items from lists https://www.freecodecamp.org/news/how-to-remove-an-item-from-a-list-in-c/
                Console.WriteLine("\nThe card of the that will be held to the next round is " + shuffledcards[2]);
                humanHeldCard = shuffledcards[2].Item2;
                shuffledcards.RemoveAt(1);
                shuffledcards.RemoveAt(0);
                
            }
            else if (humancard1 == 0 && humancard3 == 0)
            {
                // Keep shuffledcards[1];
                Console.WriteLine("\nThe card of the that will be held to the next round is " + shuffledcards[1]);
                humanHeldCard = shuffledcards[1].Item2;
                shuffledcards.RemoveAt(2);
                shuffledcards.RemoveAt(0);
                
            }
            else if (humancard2 == 0 && humancard3 == 0)
            {
                // Keep shuffledcards[0]
                Console.WriteLine("\nThe card of the that will be held to the next round is " + shuffledcards[0]);
                humanHeldCard = shuffledcards[0].Item2;
                shuffledcards.RemoveAt(2);
                shuffledcards.RemoveAt(1);
            }

            if (humanTroop > computerTroop)
            {
                Console.WriteLine("\n");
                Console.WriteLine("The human player used " + humanTroop + " troops.  The computer player used " + computerTroop + " troops.");
                Console.WriteLine("\n");
                Console.WriteLine("Human has more troops!");
                Console.WriteLine("\n");
                Console.WriteLine("Human player has won " + (humanTerritory + computerTerritory) + " points");
                Console.WriteLine("\n");
            }
            //add in tiebreaker with held card
            else
            //should be computerTroop>humanTroop
            {
                Console.WriteLine("\n");
                Console.WriteLine("The human player used " + humanTroop + " troops.  The computer player used " + computerTroop + " troops.");
                Console.WriteLine("\n");
                Console.WriteLine("Computer has more troops!");
                Console.WriteLine("\n");
                Console.WriteLine("Computer player has won " + (humanTerritory + computerTerritory) + " points");
                Console.WriteLine("\n");
            }







            

            //Console.WriteLine(humancard1);
            //Console.WriteLine(humancard2);
            //Console.WriteLine(humancard3);

            //Console.WriteLine(shuffledcards[3]);
            //Console.WriteLine(shuffledcards[4]);
            //Console.WriteLine(shuffledcards[5]);


            ////https://www.freecodecamp.org/news/how-to-remove-an-item-from-a-list-in-c/
            //shuffledcards.RemoveAt(0);
            //shuffledcards.RemoveAt(0);
            //shuffledcards.RemoveAt(0);
            //Console.WriteLine(shuffledcards[0]);
            //Console.WriteLine(shuffledcards[1]);
            //Console.WriteLine(shuffledcards[2]);




            //Dictionary<string, int> cardsinorder = new Dictionary<string, int>()
            //{
            //{"A♠", 1},{"2♠", 2},{"3♠", 3},{"4♠", 4},{"5♠", 5},{"6♠", 6},{"7♠", 7},{"8♠", 8},{"9♠", 9},{"10♠", 10},{"J♠", 10},{"Q♠", 10},{"K♠", 10},
            //{"A♣", 1},{"2♣", 2},{"3♣", 3},{"4♣", 4},{"5♣", 5},{"6♣", 6},{"7♣", 7},{"8♣", 8},{"9♣", 9},{"10♣", 10},{"J♣", 10},{"Q♣", 10},{"K♣", 10},
            //{"A♥", 1},{"2♥", 2},{"3♥", 3},{"4♥", 4},{"5♥", 5},{"6♥", 6},{"7♥", 7},{"8♥", 8},{"9♥", 9},{"10♥", 10},{"J♥", 10},{"Q♥", 10},{"K♥", 10},
            //{"A♦", 1},{"2♦", 2},{"3♦", 3},{"4♦", 4},{"5♦", 5},{"6♦", 6},{"7♦", 7},{"8♦", 8},{"9♦", 9},{"10♦", 10},{"J♦", 10},{"Q♦", 10},{"K♦", 10},

            //};


            //var arr = cardsinorder.Select(z => z.Value).ToArray();

            //Console.WriteLine(arr[0]);
            //Console.WriteLine(arr[1]);
            //Console.WriteLine(arr[2]);

        }

        //public static double Hand(Tuple<string>, Tuple<int>>[] shuffledcards, out int n)
        //{
            
        //}



        






        //public static void Hand()
        //{
        //    int humanTroop = 0;
        //    int humanTerritory = 0;
        //    int humanExtraCard = 0;

        //    Console.WriteLine("Player's hand:");
        //    string firstPlayerCard = pickedCards[0];
        //    int card2 = random.Next(1, 14);
        //    int card3 = random.Next(1, 14);
        //    Console.WriteLine("First card: " + firstPlayerCard);
        //    Console.WriteLine("Second card: " + card2);
        //    Console.WriteLine("Third card: " + card3);

        //    Console.WriteLine("\nWhich value would you like to represent your troop card (high card)");
        //    Console.WriteLine("Press 1, 2 or 3");
        //    int firstChoice = Convert.ToInt32(Console.ReadLine());

        //    switch (firstChoice)
        //    {
        //        case 1:
        //            humanTroop = Convert.ToInt32(firstPlayerCard);
        //            break;
        //        case 2:
        //            humanTroop = card2;
        //            break;
        //        case 3:
        //            humanTroop = card3;
        //            break;
        //        default:
        //            break;
        //    }

        //    Console.WriteLine("\nWhich value would you like to represent your territory card (bet)");
        //    Console.WriteLine("Press 1, 2 or 3");
        //    int secondChoice = Convert.ToInt32(Console.ReadLine());

        //    switch (secondChoice)
        //    {
        //        case 1:
        //            humanTerritory = Convert.ToInt32(firstPlayerCard);
        //            break;
        //        case 2:
        //            humanTerritory = card2;
        //            break;
        //        case 3:
        //            humanTerritory = card3;
        //            break;
        //        default:
        //            break;
        //    }

        //    Console.WriteLine("\nWhich is your tiebreak card?");
        //    Console.WriteLine("Press 1, 2 or 3");
        //    int thirdChoice = Convert.ToInt32(Console.ReadLine());

        //    switch (thirdChoice)
        //    {
        //        case 1:
        //            humanExtraCard = Convert.ToInt32(firstPlayerCard);
        //            break;
        //        case 2:
        //            humanExtraCard = card2;
        //            break;
        //        case 3:
        //            humanExtraCard = card3;
        //            break;
        //        default:
        //            break;
        //    }

        //    Console.WriteLine("Computer's hand: ");
        //    int computerTroop = random.Next(1, 14);
        //    int computerTerritory = random.Next(1, 14);
        //    int computerExtraCard = random.Next(1, 14);
        //    Console.WriteLine("Computer troop card: " + computerTroop);
        //    Console.WriteLine("Computer territory card: " + computerTerritory);
        //    Console.WriteLine("Computer tiebreak card: " + computerExtraCard);

        //    if (humanTroop > computerTroop)
        //    {
        //        Console.WriteLine("\n");
        //        Console.WriteLine("Human has more troops!");
        //        Console.WriteLine("\n");
        //        Console.WriteLine("Human player has won " + (humanTerritory + computerTerritory) + " points");
        //        Console.WriteLine("\n");

        //    }
        //    else
        //    {
        //        Console.WriteLine("\n");
        //        Console.WriteLine("Computer has more troops!");
        //        Console.WriteLine("\n");
        //        Console.WriteLine("Computer player has won " + (humanTerritory + computerTerritory) + " points");
        //        Console.WriteLine("\n");
        //    }
        //}


        static void Round()
        {
            int round = 1;
            Console.WriteLine("\nRound #" + round);
            round++;
        }

        static void Score()
        {

            //int playerScore = playerScore + roundScore;
            int playerScore = 0;
            int computerScore = 0;
            Console.WriteLine("\nPlayer score: " + playerScore);
            Console.WriteLine("Computer score: " + computerScore);
        }

        Random random = new Random();


        

       




        //public static string[] CardDeck(int numberOfCards)
        //{
        //    numberOfCards = 52;
        //    string[] pickedCards = new string[numberOfCards];
        //    for (int i = 0; i < numberOfCards; i++)
        //    {
        //        pickedCards[i] = RandomValue() + " of " + RandomSuit();
        //    }
        //    return pickedCards;


        //}


        //public static string RandomValue()
        //{

        //    int value = random.Next(1, 14);
        //    if (value == 1) return "Ace";
        //    if (value == 11) return "Jack";
        //    if (value == 12) return "Queen";
        //    if (value == 13) return "King";
        //    return value.ToString();

        //}

        //private static string RandomSuit()
        //{
        //    // get a random number from 1 to 4
        //    int value = random.Next(1, 5);
        //    // if it's 1 return the string Spades
        //    if (value == 1) return "Spades";
        //    // if it's 1 return the string Hearts
        //    if (value == 2) return "Hearts";
        //    // if it's 1 return the string Clubs
        //    if (value == 3) return "Clubs";
        //    // if we haven't returned yet, return the string Diamonds
        //    return "Diamonds";
        //}

        //if (pickedCards != null && pickedCards.Length > 0)
        //{
        //    string firstPlayerCard = pickedCards[0];
        //    Console.WriteLine("First card: " + firstPlayerCard);
        //    string secondPlayerCard = pickedCards[1];
        //    Console.WriteLine("Second card: " + secondPlayerCard);
        //    string thirdPlayerCard = pickedCards[2];
        //    Console.WriteLine("Third card: " + thirdPlayerCard);
        //}

        //else
        //{
        //    Console.WriteLine("Input End Method here");
        //}

        //Add in case statements for choosing 1, 2 or 3 to select how to use the card
        //assign case 1 value to Int humanTroop
        //assign case 2 value to humanTerritory 
        //assign case 3 value to humanExtraCard 

        //picked cards[3,4+5] are the Computer's hand.  Make card 3 case 1, etc...
        //assing cases to similar variables that start with computerTroop...


        //enum Suit
        //{
        //    Hearts,
        //    Diamonds,
        //    Spades,
        //    Clubs
        //}

        //enum Face
        //{
        //    Ace = 1,
        //    Two,
        //    Three,
        //    Four,
        //    Five,
        //    Six,
        //    Seven,
        //    Eight,
        //    Nine,
        //    Ten,
        //    Jack = 10,
        //    Queen = 10,
        //    King = 10

        //}




        //    public static string[] CardDeck(int numberOfCards)
        //    {
        //        numberOfCards = 52;
        //        string[] pickedCards = new string[numberOfCards];
        //        for (int i = 0; i < numberOfCards; i++)
        //        {
        //            pickedCards[i] = RandomValue() + " of " + RandomSuit();
        //        }

        //        return pickedCards;

        //    }





        //    public static string RandomValue()
        //    {

        //        int value = random.Next(1, 14);
        //        if (value == 1) return "Ace";
        //        if (value == 11) return "Jack";
        //        if (value == 12) return "Queen";
        //        if (value == 13) return "King";
        //        return value.ToString();

        //    }

        //    private static string RandomSuit()
        //    {
        //        // get a random number from 1 to 4
        //        int value = random.Next(1, 5);
        //        // if it's 1 return the string Spades
        //        if (value == 1) return "Spades";
        //        // if it's 1 return the string Hearts
        //        if (value == 2) return "Hearts";
        //        // if it's 1 return the string Clubs
        //        if (value == 3) return "Clubs";
        //        // if we haven't returned yet, return the string Diamonds
        //        return "Diamonds";
        //    }

        //}









    }













    //Console.WriteLine("Enter the number of cards to pick:");
    //string line = Console.ReadLine();
    //if (int.TryParse(line, out int numberOfCards))
    //{
    //    foreach (string card in CardPicker.Territory(3))
    //    {
    //        Console.WriteLine(card);
    //    }
    //}
    //else
    //{
    //    Console.WriteLine("The input is not a valid number");
    //}


    
   
}
